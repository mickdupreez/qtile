#+TITLE: OZ's Qtile Config
#+PROPERTY: header-args :tangle test.y

* TABLE OF CONTENTS :toc:
- [[#imports][Imports]]
  - [[#the-code][THE CODE]]
- [[#hot-keys][Hot Keys]]
  - [[#the-code-1][THE CODE]]
- [[#color-pallete-for-qtile][Color Pallete For qtile]]
  - [[#the-code-2][THE CODE]]
- [[#window-layouts][Window Layouts]]
  - [[#the-code-3][THE CODE]]
- [[#work-spaces][Work-Spaces]]
  - [[#the-code-4][THE CODE]]
- [[#bar-and-widgets][Bar And Widgets]]
  - [[#the-code-5][THE CODE]]
- [[#mouse-controll][Mouse Controll]]
  - [[#the-code-6][THE CODE]]
- [[#window-focus][Window Focus]]
  - [[#the-code-7][THE CODE]]
- [[#run-on-startup][Run On Startup]]
  - [[#the-code-8][THE CODE]]
- [[#window-manager-name][Window Manager Name]]
  - [[#the-code-9][THE CODE]]

* Imports

This block of code contains the python libraries and modules that need to bee imported for qtile to function

** THE CODE

#+begin_src python

import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy
from typing import List  # noqa: F401
from libqtile.dgroups import simple_key_binder


#+end_src

* Hot Keys

This block of code is for the hot key combinations used and reserved by qtile...
"mod" is the windows or super key

** THE CODE

#+begin_src python

mod = "mod4"
terminal = "alacritty"


keys = [
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(),
        desc="Move window focus to other window"),

    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(),
        desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(),
        desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(),
        desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(),
        desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),

    Key([mod, "shift"], "r", lazy.restart(), desc="Restart Qtile"),
    Key([mod, "shift"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(),
        desc="Spawn a command using a prompt widget"),
]

#+end_src

* Color Pallete For qtile

This block of code is a list of colors used within this config

** THE CODE

#+begin_src python

colors = [["#282c34", "#282c34"], # panel background
          ["#3d3f4b", "#434758"], # background for current screen tab
          ["#ffffff", "#ffffff"], # font color for group names
          ["#ff5555", "#ff5555"], # border line color for current tab
          ["#74438f", "#74438f"], # border line color for 'other tabs' and color for 'odd widgets'
          ["#4f76c7", "#4f76c7"], # color for the 'even widgets'
          ["#e1acff", "#e1acff"], # window name
          ["#ecbbfb", "#ecbbfb"]] # backbround for inactive screens

#+end_src

* Window Layouts

This block of code sets the default layout for all windows

** THE CODE

#+begin_src python


layouts = [
    layout.Columns(
        border_focus = '#e1acff',
        margin_on_single = None,
        margin = 10,
        border_width = 4),
    layout.Max(),
]


#+end_src

* Work-Spaces

This block of code is a list of the workspaces numbered 1-9.

** THE CODE

#+begin_src python

group_names = [("1", {'layout': 'monadtall'}),
               ("2", {'layout': 'monadtall'}),
               ("3", {'layout': 'monadtall'}),
               ("4", {'layout': 'monadtall'}),
               ("5", {'layout': 'monadtall'}),
               ("6", {'layout': 'monadtall'}),
               ("7", {'layout': 'monadtall'}),
               ("8", {'layout': 'monadtall'}),
               ("9", {'layout': 'monadtall'})]


groups = [Group(name, **kwargs) for name, kwargs in group_names]

for i, (name, kwargs) in enumerate(group_names, 1):
    keys.append(Key([mod], str(i), lazy.group[name].toscreen()))        # Switch to another group
    keys.append(Key([mod, "shift"], str(i), lazy.window.togroup(name))) # Send current window to another group
# allow mod3+1 through mod3+0 to bind to groups; if you bind your groups
# by hand in your config, you don't need to do this.
from libqtile.dgroups import simple_key_binder
dgroups_key_binder = simple_key_binder([mod])

#+end_src

#+RESULTS:

* Bar And Widgets

This block of code is for the bar and all the widgets in the bar.

** THE CODE

#+begin_src python


widget_defaults = dict(
    font='MesloLGS NF BOLD',
    fontsize=15,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        top=bar.Bar(
            [
                ##separator##
                widget.Sep(linewidth = 0, padding = 26, background = colors[0]),

                ##show current layout##
                widget.CurrentLayout(),

                ##separator##
                widget.Sep(linewidth = 0, padding = 5, background = colors[0]),


                ##separator##
                widget.Sep(
                    linewidth = 0,
                    padding = 16,
                    background = colors[0]
                    ),

                ##workspaces##
                widget.GroupBox(
                    highlight_method = "line",
                    active = colors[3],
                    inactive = colors[7],
                    highlight_color = colors[1],
                    this_current_screen_border = colors[6],
                    this_screen_border = colors[4]
                    ),


                ##separator##
                widget.Sep(
                    linewidth = 0,
                    padding = 16,
                    background = colors[0]
                    ),



                ##window name##
                widget.WindowName(),


                ##run menu##
                widget.Prompt(),

                ##systray##
                widget.Systray(),


                ##separator##
                widget.Sep(
                    linewidth = 0,
                    padding = 16,
                    background = colors[0]
                    ),

                ##cpu##
                widget.CPU(),

                ##separator##
                widget.Sep(
                    linewidth = 0,
                    padding = 16,
                    background = colors[0]
                    ),

                ##ram##
                widget.Memory(),

                ##separator##
                widget.Sep(
                    linewidth = 0,
                    padding = 16,
                    background = colors[0]
                    ),



                ##network##
                widget.Net(interface = 'wlp5s0'),



                ##separator##
                widget.Sep(
                    linewidth = 0,
                    padding = 16,
                    background = colors[0]
                    ),



                ##clock##
                widget.Clock(format='%Y-%m-%d %a %I:%M %p'),


                ##volume##
                widget.Volume(
                    padding = 5
                    ),



                ##log out##
                widget.QuickExit(),
            ],
            24,
            background=colors[0],
            opacity = 0.8,
            margin = 5,
        ),
    ),
]


#+end_src

* Mouse Controll

This block of code enables you to use the mouse to drag windows arround.

** THE CODE

#+begin_src python


# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]


#+end_src

* Window Focus

This block of code handles window focus and also default float windows for some programs

** THE CODE

#+begin_src python


dgroups_key_binder = None
dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True


#+end_src

* Run On Startup

This block of code runs a shellscript on first startup,
this launches startup apps

** THE CODE

#+begin_src python


auto_minimize = True
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])

#+end_src

* Window Manager Name

This block is for certain java apps

** THE CODE

#+begin_src python

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"

#+end_src

#+RESULTS:
: None
